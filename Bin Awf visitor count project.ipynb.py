{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6357e8a7-7e7e-42db-90f1-7ca602d9dfd3",
   "metadata": {
    "jupyter": {
     "is_executing": true
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ff2fcf47-4fe8-4d7a-9464-df1eb5c05179",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-18T06:35:33.720751Z",
     "start_time": "2025-02-18T06:35:23.064593Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:10: SyntaxWarning: invalid escape sequence '\\s'\n",
      "<>:12: SyntaxWarning: invalid escape sequence '\\s'\n",
      "<>:10: SyntaxWarning: invalid escape sequence '\\s'\n",
      "<>:12: SyntaxWarning: invalid escape sequence '\\s'\n",
      "C:\\Users\\mdp\\AppData\\Local\\Temp\\ipykernel_12900\\3900602626.py:10: SyntaxWarning: invalid escape sequence '\\s'\n",
      "  STAFF_DIR = \"Bin Awf\\staff_images\"\n",
      "C:\\Users\\mdp\\AppData\\Local\\Temp\\ipykernel_12900\\3900602626.py:12: SyntaxWarning: invalid escape sequence '\\s'\n",
      "  ATTENDANCE_FILE = \"Bin Awf\\staff_attendance.csv\"\n",
      "C:\\Users\\mdp\\AppData\\Local\\Temp\\ipykernel_12900\\3900602626.py:10: SyntaxWarning: invalid escape sequence '\\s'\n",
      "  STAFF_DIR = \"Bin Awf\\staff_images\"\n",
      "C:\\Users\\mdp\\AppData\\Local\\Temp\\ipykernel_12900\\3900602626.py:12: SyntaxWarning: invalid escape sequence '\\s'\n",
      "  ATTENDANCE_FILE = \"Bin Awf\\staff_attendance.csv\"\n"
     ]
    },
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'face_recognition'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcv2\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmediapipe\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mmp\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mface_recognition\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mos\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'face_recognition'"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import mediapipe as mp\n",
    "import face_recognition\n",
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "# Paths\n",
    "STAFF_DIR = \"Bin Awf\\staff_images\"\n",
    "LOG_FILE = \"Bin Awf\\visitor_log.csv\"\n",
    "ATTENDANCE_FILE = \"Bin Awf\\staff_attendance.csv\"\n",
    "\n",
    "# Load MediaPipe Face Detection\n",
    "mp_face_detection = mp.solutions.face_detection\n",
    "mp_drawing = mp.solutions.drawing_utils\n",
    "\n",
    "# Load Staff Images and Encode Faces\n",
    "def load_staff():\n",
    "    staff_encodings = []\n",
    "    staff_names = []\n",
    "    if not os.path.exists(STAFF_DIR):\n",
    "        os.makedirs(STAFF_DIR)\n",
    "\n",
    "    for file in os.listdir(STAFF_DIR):\n",
    "        if file.endswith(\".jpg\") or file.endswith(\".png\"):\n",
    "            path = os.path.join(STAFF_DIR, file)\n",
    "            image = face_recognition.load_image_file(path)\n",
    "            encoding = face_recognition.face_encodings(image)\n",
    "            if encoding:\n",
    "                staff_encodings.append(encoding[0])\n",
    "                staff_names.append(os.path.splitext(file)[0])\n",
    "    \n",
    "    return staff_encodings, staff_names\n",
    "\n",
    "# Initialize staff data\n",
    "staff_encodings, staff_names = load_staff()\n",
    "\n",
    "# Function to mark attendance\n",
    "def mark_attendance(name):\n",
    "    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
    "    df = pd.DataFrame([[name, now]], columns=[\"Staff Name\", \"Timestamp\"])\n",
    "    \n",
    "    if not os.path.exists(ATTENDANCE_FILE):\n",
    "        df.to_csv(ATTENDANCE_FILE, index=False)\n",
    "    else:\n",
    "        df.to_csv(ATTENDANCE_FILE, mode='a', header=False, index=False)\n",
    "\n",
    "# Function to log visitor count\n",
    "def log_visitor_count(count):\n",
    "    now = datetime.now().strftime('%Y-%m-%d')\n",
    "    df = pd.DataFrame([[now, count]], columns=[\"Date\", \"Visitors\"])\n",
    "    \n",
    "    if not os.path.exists(LOG_FILE):\n",
    "        df.to_csv(LOG_FILE, index=False)\n",
    "    else:\n",
    "        df.to_csv(LOG_FILE, mode='a', header=False, index=False)\n",
    "\n",
    "# Function to recognize staff using face distance\n",
    "def recognize_staff(face_encodings):\n",
    "    recognized_staff = set()\n",
    "    \n",
    "    for encoding in face_encodings:\n",
    "        if staff_encodings:\n",
    "            distances = face_recognition.face_distance(staff_encodings, encoding)\n",
    "            min_distance = min(distances)\n",
    "            if min_distance < 0.5:  # Adjust threshold for better matching\n",
    "                matched_idx = np.argmin(distances)\n",
    "                recognized_staff.add(staff_names[matched_idx])\n",
    "    \n",
    "    return recognized_staff\n",
    "\n",
    "# Open CCTV Camera\n",
    "cap = cv2.VideoCapture(0)  # Change this to your CCTV camera feed\n",
    "\n",
    "# Variables\n",
    "daily_attendance_marked = False\n",
    "visitor_records = []  # List to store (encoding, timestamp)\n",
    "visitor_count = 0\n",
    "VISITOR_TIMEOUT = timedelta(minutes=5)  # Recount visitors after 5 minutes\n",
    "FACE_DISTANCE_THRESHOLD = 0.6  # Threshold for face matching\n",
    "\n",
    "while cap.isOpened():\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    # Convert frame to RGB\n",
    "    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "    # Detect faces using MediaPipe\n",
    "    face_locations = face_recognition.face_locations(rgb_frame)\n",
    "    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)\n",
    "\n",
    "    # Recognize staff\n",
    "    recognized_staff = recognize_staff(face_encodings)\n",
    "\n",
    "    # Mark attendance at store opening (First detection of staff)\n",
    "    if not daily_attendance_marked and recognized_staff:\n",
    "        for staff in recognized_staff:\n",
    "            mark_attendance(staff)\n",
    "        daily_attendance_marked = True  # Ensure attendance is marked only once per day\n",
    "\n",
    "    # Count non-staff visitors uniquely using time-based tracking\n",
    "    current_time = datetime.now()\n",
    "    \n",
    "    for encoding, (top, right, bottom, left) in zip(face_encodings, face_locations):\n",
    "        # Check if the person is a staff member\n",
    "        if any(face_recognition.compare_faces(staff_encodings, encoding, tolerance=0.5)):\n",
    "            continue  # Skip staff members\n",
    "\n",
    "        # Check if this visitor was seen recently\n",
    "        seen_before = False\n",
    "        for stored_encoding, last_seen_time in visitor_records:\n",
    "            distance = face_recognition.face_distance([stored_encoding], encoding)[0]\n",
    "            if distance < FACE_DISTANCE_THRESHOLD and (current_time - last_seen_time) < VISITOR_TIMEOUT:\n",
    "                seen_before = True\n",
    "                break  # Ignore this face since it's a repeat\n",
    "\n",
    "        if not seen_before:\n",
    "            # New visitor detected\n",
    "            visitor_records.append((encoding, current_time))\n",
    "            visitor_count += 1\n",
    "\n",
    "            # Draw bounding box around visitors\n",
    "            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)\n",
    "            cv2.putText(frame, \"Visitor\", (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)\n",
    "\n",
    "    # Display output\n",
    "    cv2.putText(frame, f\"Visitors: {visitor_count}\", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)\n",
    "    cv2.imshow(\"Visitor Counter\", frame)\n",
    "\n",
    "    # Exit on 'q' key\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "# Log visitor count at the end of the day\n",
    "log_visitor_count(visitor_count)\n",
    "\n",
    "# Cleanup\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19978fbc-50f5-4d59-820e-a40afb9dd56e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57114be9-7d09-4a26-9d72-163927707c59",
   "metadata": {
    "jupyter": {
     "is_executing": true
    }
   },
   "outputs": [],
   "source": [
    "import cv2\n",
    "import mediapipe as mp\n",
    "import face_recognition\n",
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "# Paths\n",
    "STAFF_DIR = \"staff_images\"\n",
    "LOG_FILE = \"visitor_log.csv\"\n",
    "ATTENDANCE_FILE = \"staff_attendance.csv\"\n",
    "\n",
    "# Load MediaPipe Face Detection\n",
    "mp_face_detection = mp.solutions.face_detection\n",
    "mp_drawing = mp.solutions.drawing_utils\n",
    "\n",
    "# Load Staff Images and Encode Faces\n",
    "def load_staff():\n",
    "    staff_encodings = []\n",
    "    staff_names = []\n",
    "    if not os.path.exists(STAFF_DIR):\n",
    "        os.makedirs(STAFF_DIR)\n",
    "\n",
    "    for file in os.listdir(STAFF_DIR):\n",
    "        if file.endswith(\".jpg\") or file.endswith(\".png\"):\n",
    "            path = os.path.join(STAFF_DIR, file)\n",
    "            image = face_recognition.load_image_file(path)\n",
    "            encoding = face_recognition.face_encodings(image)\n",
    "            if encoding:\n",
    "                staff_encodings.append(encoding[0])\n",
    "                staff_names.append(os.path.splitext(file)[0])\n",
    "    \n",
    "    return staff_encodings, staff_names\n",
    "\n",
    "# Initialize staff data\n",
    "staff_encodings, staff_names = load_staff()\n",
    "\n",
    "# Function to mark attendance\n",
    "def mark_attendance(name):\n",
    "    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
    "    df = pd.DataFrame([[name, now]], columns=[\"Staff Name\", \"Timestamp\"])\n",
    "    \n",
    "    if not os.path.exists(ATTENDANCE_FILE):\n",
    "        df.to_csv(ATTENDANCE_FILE, index=False)\n",
    "    else:\n",
    "        df.to_csv(ATTENDANCE_FILE, mode='a', header=False, index=False)\n",
    "\n",
    "# Function to log visitor count\n",
    "def log_visitor_count(count):\n",
    "    now = datetime.now().strftime('%Y-%m-%d')\n",
    "    df = pd.DataFrame([[now, count]], columns=[\"Date\", \"Visitors\"])\n",
    "    \n",
    "    if not os.path.exists(LOG_FILE):\n",
    "        df.to_csv(LOG_FILE, index=False)\n",
    "    else:\n",
    "        df.to_csv(LOG_FILE, mode='a', header=False, index=False)\n",
    "\n",
    "# Function to recognize staff using face distance\n",
    "def recognize_staff(face_encodings):\n",
    "    recognized_staff = set()\n",
    "    \n",
    "    for encoding in face_encodings:\n",
    "        if staff_encodings:\n",
    "            distances = face_recognition.face_distance(staff_encodings, encoding)\n",
    "            min_distance = min(distances)\n",
    "            if min_distance < 0.5:  # Adjust threshold for better matching\n",
    "                matched_idx = np.argmin(distances)\n",
    "                recognized_staff.add(staff_names[matched_idx])\n",
    "    \n",
    "    return recognized_staff\n",
    "vd = 'rstp://192.168.0.1:554/ch1/main/av_stream'\n",
    "# Open CCTV Camera\n",
    "cap = cv2.VideoCapture(0)  # Change this to your CCTV camera feed\n",
    "\n",
    "# Variables\n",
    "daily_attendance_marked = False\n",
    "visitor_records = []  # List to store (encoding, timestamp)\n",
    "visitor_count = 0\n",
    "VISITOR_TIMEOUT = timedelta(minutes=5)  # Recount visitors after 5 minutes\n",
    "FACE_DISTANCE_THRESHOLD = 0.6  # Threshold for face matching\n",
    "\n",
    "while cap.isOpened():\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    # Convert frame to RGB\n",
    "    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "    # Detect faces using face_recognition\n",
    "    face_locations = face_recognition.face_locations(rgb_frame)\n",
    "    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)\n",
    "\n",
    "    # Recognize staff\n",
    "    recognized_staff = recognize_staff(face_encodings)\n",
    "\n",
    "    # Mark attendance at store opening (First detection of staff)\n",
    "    if not daily_attendance_marked and recognized_staff:\n",
    "        for staff in recognized_staff:\n",
    "            mark_attendance(staff)\n",
    "        daily_attendance_marked = True  # Ensure attendance is marked only once per day\n",
    "\n",
    "    # Count non-staff visitors uniquely using time-based tracking\n",
    "    current_time = datetime.now()\n",
    "    \n",
    "    for encoding, (top, right, bottom, left) in zip(face_encodings, face_locations):\n",
    "        # Check if the person is a staff member\n",
    "        if any(face_recognition.compare_faces(staff_encodings, encoding, tolerance=0.5)):\n",
    "            continue  # Skip staff members\n",
    "\n",
    "        # Check if this visitor was seen recently\n",
    "        seen_before = False\n",
    "        for stored_encoding, last_seen_time in visitor_records:\n",
    "            distance = face_recognition.face_distance([stored_encoding], encoding)[0]\n",
    "            if distance < FACE_DISTANCE_THRESHOLD and (current_time - last_seen_time) < VISITOR_TIMEOUT:\n",
    "                seen_before = True\n",
    "                break  # Ignore this face since it's a repeat\n",
    "\n",
    "        if not seen_before:\n",
    "            # New visitor detected\n",
    "            visitor_records.append((encoding, current_time))\n",
    "            visitor_count += 1\n",
    "\n",
    "            # Draw bounding box around visitors\n",
    "            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)\n",
    "            cv2.putText(frame, \"Visitor\", (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)\n",
    "\n",
    "    # Display output\n",
    "    cv2.putText(frame, f\"Visitors: {visitor_count}\", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)\n",
    "    cv2.imshow(\"Bin Awf visitor Counter\", frame)\n",
    "\n",
    "    # Exit on 'q' key\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "# Log visitor count at the end of the day\n",
    "log_visitor_count(visitor_count)\n",
    "\n",
    "# Cleanup\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb926e81-3c5f-4355-8ac1-ca65240bff46",
   "metadata": {
    "jupyter": {
     "is_executing": true
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8358d10abf358b40",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
